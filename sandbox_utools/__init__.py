# -*- coding: utf-8 -*-
# flake8: noqa
"""
Initially Generated By:
    python -m utool --tf setup_repo --repo=sandbox_utools --codedir=~/code --modname=sandbox_utools
"""
from __future__ import absolute_import, division, print_function, unicode_literals
import sys
__version__ = '0.0.0'

IMPORT_TUPLES = [
    ('util_graph', None),
    ('util_pandas', None),
]
__DYNAMIC__ = '--nodyn' not in sys.argv

"""
python -c "import sandbox_utools" --dump-sandbox_utools-init
python -c "import sandbox_utools" --update-sandbox_utools-init
"""

DOELSE = False
if __DYNAMIC__:
    # Dynamically import listed util libraries and their members.
    from utool._internal import util_importer
    ignore_endswith = []
    import_execstr = util_importer.dynamic_import(
        __name__, IMPORT_TUPLES, ignore_endswith=ignore_endswith)
    exec(import_execstr)
    DOELSE = False
else:
    DOELSE = True
if DOELSE:
    # <AUTOGEN_INIT>

    from sandbox_utools import util_graph
    from sandbox_utools.util_graph import (all_multi_paths,
                                           approx_min_num_components,
                                           bfs_conditional, bfs_multi_edges,
                                           bzip, color_nodes,
                                           convert_multigraph_to_graph,
                                           dag_longest_path, dict_depth,
                                           edges_to_adjacency_list,
                                           get_allkeys, get_ancestor_levels,
                                           get_descendant_levels,
                                           get_graph_bounding_box, get_levels,
                                           graph_info, level_order,
                                           longest_levels, merge_level_order,
                                           nx_all_nodes_between,
                                           nx_all_simple_edge_paths,
                                           nx_common_ancestors,
                                           nx_common_descendants,
                                           nx_dag_node_rank,
                                           nx_delete_None_edge_attr,
                                           nx_delete_None_node_attr,
                                           nx_delete_edge_attr,
                                           nx_delete_node_attr, nx_edges,
                                           nx_ensure_agraph_color,
                                           nx_from_adj_dict, nx_from_matrix,
                                           nx_get_default_node_attributes,
                                           nx_make_adj_matrix, nx_makenode,
                                           nx_set_default_node_attributes,
                                           nx_sink_nodes, nx_source_nodes,
                                           nx_to_adj_dict, nx_topsort_nodes,
                                           nx_topsort_rank,
                                           nx_transitive_reduction,
                                           path_to_leafs, paths_to_root,
                                           reverse_path, reverse_path_edges,
                                           shortest_levels, simplify_graph,
                                           subgraph_from_edges, testdata_graph,
                                           translate_graph, traverse_path,)
    import utool
    print, rrr, profile = utool.inject2(__name__, '[sandbox_utools]')


    def reassign_submodule_attributes(verbose=True):
        """
        why reloading all the modules doesnt do this I don't know
        """
        import sys
        if verbose and '--quiet' not in sys.argv:
            print('dev reimport')
        # Self import
        import sandbox_utools
        # Implicit reassignment.
        seen_ = set([])
        for tup in IMPORT_TUPLES:
            if len(tup) > 2 and tup[2]:
                continue  # dont import package names
            submodname, fromimports = tup[0:2]
            submod = getattr(sandbox_utools, submodname)
            for attr in dir(submod):
                if attr.startswith('_'):
                    continue
                if attr in seen_:
                    # This just holds off bad behavior
                    # but it does mimic normal util_import behavior
                    # which is good
                    continue
                seen_.add(attr)
                setattr(sandbox_utools, attr, getattr(submod, attr))


    def reload_subs(verbose=True):
        """ Reloads sandbox_utools and submodules """
        if verbose:
            print('Reloading submodules')
        rrr(verbose=verbose)
        def wrap_fbrrr(mod):
            def fbrrr(*args, **kwargs):
                """ fallback reload """
                if verbose:
                    print('No fallback relaod for mod=%r' % (mod,))
                # Breaks ut.Pref (which should be depricated anyway)
                # import imp
                # imp.reload(mod)
            return fbrrr
        def get_rrr(mod):
            if hasattr(mod, 'rrr'):
                return mod.rrr
            else:
                return wrap_fbrrr(mod)
        def get_reload_subs(mod):
            return getattr(mod, 'reload_subs', wrap_fbrrr(mod))
        get_rrr(util_graph)(verbose=verbose)
        rrr(verbose=verbose)
        try:
            # hackish way of propogating up the new reloaded submodule attributes
            reassign_submodule_attributes(verbose=verbose)
        except Exception as ex:
            print(ex)
    rrrr = reload_subs
    # </AUTOGEN_INIT>
